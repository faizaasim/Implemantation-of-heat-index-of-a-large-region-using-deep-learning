import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import warnings
warnings.filterwarnings(action="ignore")
pip install seaborn
# Load and preprocess the dataset
filename = "resultant_heat_index_data.csv"
data = pd.read_csv('C:/Users/faiza/OneDrive/Desktop/IMD/resultant_heat_index_data.csv', index_col=0, parse_dates=True)
data['DBT'] = pd.to_numeric(data['DBT'], errors='coerce')
data['DPT'] = pd.to_numeric(data['DPT'], errors='coerce')
data['RH'] = pd.to_numeric(data['RH'], errors='coerce')
data['Heat Index'] = pd.to_numeric(data['Heat Index'], errors='coerce')
# Drop rows with missing values
data.dropna(inplace=True)
# Scale the data (optional but recommended for neural networks)
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data[['DBT', 'DPT', 'RH', 'Heat Index']])
# Define window size for creating sequences
window_size = 12  # Number of time steps to look back
# Create sequences of input features and target values
sequences = []
targets = []
for i in range(window_size, len(scaled_data)):
    sequences.append(scaled_data[i-window_size:i, :3])  # Input features (DBT, DPT, RH)
    targets.append(scaled_data[i, 3])  # Target value (Heat Index)
# Convert sequences and targets to numpy arrays
X = np.array(sequences)
y = np.array(targets)
# Print the shape of the input data
print("Input data shape:", X.shape)
print("Target data shape:", y.shape)
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Print the shapes of the training and testing sets
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("X_test shape:", X_test.shape)
print("y_test shape:", y_test.shape)
# Define the LSTM model architecture
model = Sequential()
model.add(LSTM(64, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dense(1))  # Output layer (1 neuron for regression task)

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.1)

# Evaluate the model on the test set
loss = model.evaluate(X_test, y_test)
print("Test Loss:", loss)
# Plot training history
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss (MSE)')
plt.title('Training History')
plt.legend()
plt.show()
# Make predictions on the test set
y_pred = model.predict(X_test)

# Inverse transform the scaled predictions and actual values
y_pred = scaler.inverse_transform(np.concatenate((X_test[:, -1, :3], y_pred.reshape(-1, 1)), axis=1))[:, -1]
y_test_actual = scaler.inverse_transform(np.concatenate((X_test[:, -1, :3], y_test.reshape(-1, 1)), axis=1))[:, -1]

# Calculate evaluation metrics (e.g., RMSE)
from sklearn.metrics import mean_squared_error, mean_absolute_error

rmse = np.sqrt(mean_squared_error(y_test_actual, y_pred))
mae = mean_absolute_error(y_test_actual, y_pred)

print("Test RMSE:", rmse)
print("Test MAE:", mae)
# Plot Heat Index Over Time
plt.figure(figsize=(12, 6))
plt.plot(y_test_actual, label='Actual Heat Index', color='blue', alpha=0.7)
plt.plot(y_pred, label='Predicted Heat Index', color='red', alpha=0.7)
plt.title('Heat Index Over Time')
plt.xlabel('Index')
plt.ylabel('Heat Index')
plt.legend()
plt.grid(True)
plt.show()
# Plot Heat Index vs. Dry Bulb Temperature
plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_test[:, -1, 0], y=y_test_actual, label='Actual Heat Index', color='blue', alpha=0.7)
plt.show()


plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_test[:, -1, 0], y=y_pred, label='Predicted Heat Index', color='red', alpha=0.7)
# sns.scatterplot(x=X_test[:, -1, 0], y=y_test_actual, label='Actual Heat Index', color='blue', alpha=0.7)
plt.title('Heat Index vs. Dry Bulb Temperature')
plt.xlabel('Dry Bulb Temperature (°C)')
plt.ylabel('Heat Index')
plt.legend()
plt.grid(True)
plt.show()
# Plot Distribution of Heat Index
plt.figure(figsize=(10, 6))
sns.histplot(y_pred, bins=20, kde=True, color='red', alpha=0.7, label='Predicted Heat Index')
sns.histplot(y_test_actual, bins=20, kde=True, color='blue', alpha=0.7, label='Actual Heat Index')
plt.title('Distribution of Heat Index')
plt.xlabel('Heat Index')
plt.ylabel('Frequency')
plt.legend()
plt.grid(True)
plt.show()
# Extract DBT, RH, and predicted Heat Index from X_test and y_pred
dbt = X_test[:, -1, 0]  # Dry Bulb Temperature
rh = X_test[:, -1, 2]    # Relative Humidity
heat_index_pred = y_pred # Predicted Heat Index

# Create a DataFrame with DBT, RH, and predicted Heat Index
heatmap_data = pd.DataFrame({'DBT': dbt, 'RH': rh, 'Predicted Heat Index': heat_index_pred})

# Optionally, you can round the values for better visualization
heatmap_data['DBT'] = np.round(heatmap_data['DBT'], decimals=1)
heatmap_data['RH'] = np.round(heatmap_data['RH'], decimals=1)
# Plot Heatmap of Heat Index by Dry Bulb Temperature and Relative Humidity
plt.figure(figsize=(12, 8))
heatmap = heatmap_data.pivot_table(values='Predicted Heat Index', index='DBT', columns='RH', aggfunc='mean')
sns.heatmap(heatmap, cmap='YlOrRd', annot=True, fmt='.1f', linewidths=.5)
plt.title('Heat Index by Dry Bulb Temperature and Relative Humidity')
plt.xlabel('Relative Humidity (%)')
plt.ylabel('Dry Bulb Temperature (°C)')
plt.show()
